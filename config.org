#+TITLE: HumanoidSandvichDispenser's Emacs Configuration
#+AUTHOR: HumanoidSandvichDispenser
#+PROPERTY: header-args :tangle yes :results silent
#+STARTUP: indent inlineimages content

* Init

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "auto.el" user-emacs-directory))

(setq inhibit-startup-message t)
(tool-bar-mode -1) ; disable tool bar
(menu-bar-mode -1) ; disable menu bar
(scroll-bar-mode -1) ; disable scroll bar

(setq-default indent-tabs-mode nil) ; disable tabs
(setq-default tab-width 4) ; 4 spaces = 1 tab
(setq sgml-basic-offset 4)
(setq indent-line-function 'insert-tab) ; spaces as tabs
(setq tab-always-indent nil)

(setq-default c-basic-offset 4)
#+end_src

Enable autopairs and autoindentation.

#+begin_src emacs-lisp
(electric-indent-mode)
#+end_src

In insert mode, if text is selected, replace the selection with whatever we are typing.

#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src

Confirm exiting emacs.

#+begin_src emacs-lisp
(setq confirm-kill-emacs #'y-or-n-p)
#+end_src

** Emacsclient Dashboard Fix

Make sure ~emacsclient~ starts up with the dashboard buffer by default:

#+begin_src emacs-lisp
(setq initial-buffer-choice (lambda ()
                              (get-buffer "*dashboard*")))
#+end_src

** Superword Mode

+Enable ~superword-mode~ so underscores are treated as words, which is respected by ~evil-mode~.+

Superword mode sometimes breaks ~evil-mode~ and does not navigate through the entire word.

#+begin_src emacs-lisp
(global-superword-mode nil)
#+end_src

** Override Face Attributes

This is an appearance configuration, but it must be loaded before any package.

#+begin_src emacs-lisp
(defadvice load-theme (after set-theme-overrides activate)
  (set-face-attribute 'org-block-begin-line nil :background "transparent")
  (set-face-attribute 'org-block-end-line nil :background "transparent")
  (set-face-attribute
   'tab-bar nil
   :height 120
   :box t)
  (set-face-attribute
   'tab-bar-tab nil
   :height 120
   :overline (color-darken-name
              (face-attribute
               'minibuffer-prompt
               :foreground) 0)
   :box (list :line-width 4
              :color (face-attribute 'default :background))))
#+end_src

** Backups

Backups must be placed on a mount partition (where all my documents are normally stored). This also helps reduce clutter as backups are not placed in the directory of the original files.

#+begin_src emacs-lisp
(setq
 backup-by-copying t
 backup-directory-alist '((".*" . "~/mnt/emacs-backup"))
 auto-save-default nil
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t)
#+end_src

** Fill Column

Set the fill column to 81. 80 characters is the standard line length.

#+begin_src emacs-lisp
(setq fill-column 82)
#+end_src

** Start Server

Start the Emacs server so new frames can be created with ~emacsclient~.

#+begin_src emacs-lisp
(server-start)
#+end_src

* Packages

Install ~straight.el~ without using ~package.el~ if it is not already installed:

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

Install ~use-package~ to simplify our configuration file:

#+begin_src emacs-lisp
(straight-use-package 'use-package)
(use-package org :straight (:type built-in))
#+end_src

Use ~straight.el~ instead of ~package.el~ to manage packages with ~use-package~ by default.

#+begin_src emacs-lisp
(setq straight-use-package-by-default t)
#+end_src

** Evil

*** Evil Mode

Enable ~evil-mode~, a vim layer for emacs.

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-keybinding nil
        evil-want-minibuffer nil
        evil-undo-system 'undo-redo)
  (evil-mode 1)
  :config
  (with-eval-after-load 'ivy
    ;; <escape> to exit ivy minibuffers
    (define-key ivy-minibuffer-map
      (kbd "<escape>")
      #'minibuffer-keyboard-quit))
  (setq evil-symbol-word-search t))
#+end_src

Configure ~evil-mode~ variables

#+begin_src emacs-lisp
(setq evil-emacs-state-modes nil
      evil-insert-state-modes nil
      evil-motion-state-modes nil)

(setq evil-normal-state-cursor '(box)
      evil-insert-state-cursor '(bar)
      evil-visual-state-cursor '(hollow)
      evil-emacs-state-cursor '(bar))
#+end_src

*** Evil Cursors

Change the cursor to their appropriate style on terminals when using ~evil-mode~.

#+begin_src emacs-lisp
(use-package evil-terminal-cursor-changer
  :after evil
  :config
  (unless (display-graphic-p)
    (evil-terminal-cursor-changer-activate)))
#+end_src

*** Evil Collection

Enables evil keybindings for modes that do not support them by default.

#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config (evil-collection-init))
#+end_src

*** Avy

Avy allows easymotion-like searching and jumping.

#+begin_src emacs-lisp
(use-package avy
  :after evil)
#+end_src

*** Evil Goggles

Highlight any evil operation such as yanking and changing text.

#+begin_src emacs-lisp
(use-package evil-goggles
  :after magit
  :config
  (evil-goggles-mode)
  (evil-goggles-use-magit-faces)
  (setq evil-goggles-duration 0
        evil-goggles-async-duration 2
        evil-goggles-enable-delete nil))
#+end_src

** Content/Dependencies

*** All the Icons

Install custom icons, required by various packages.

#+begin_src emacs-lisp
(use-package all-the-icons
  :config
  (setq all-the-icons-scale-factor 0.8))
#+end_src

*** Emojify

Display emojis in Emacs.

#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src

*** request

Perform HTTP requests in Emacs.

#+begin_src emacs-lisp
(use-package request)
#+end_src

*** Posframe

Enable using posframes to display minibuffers at specific positions.

#+begin_src emacs-lisp
(use-package posframe)
#+end_src

** Utilities

*** general.el

Write cleaner keybindings and mappings.

#+begin_src emacs-lisp
(use-package general
  :after evil-collection)
#+end_src

*** Ivy, Counsel, and Swiper

#+begin_src emacs-lisp
(use-package ivy
  :config
  (ivy-mode)
  (setq ivy-re-builders-alist
        '((swiper . regexp-quote)
          (t . ivy--regex-ignore-order))
        ivy-virtual-abbreviate 'abbreviate
        uniquify-buffer-name-style 'post-forward-angle-brackets
        uniquify-min-dir-content 2))

(use-package counsel
  :config
  (counsel-mode))

(use-package swiper
  :config
  (setq swiper-goto-start-of-match t))
#+end_src

Disable searching with caret when using ~ivy~.

#+begin_src emacs-lisp
(setq ivy-initial-inputs-alist nil)
#+end_src

*** ivy-posframe

Display ~ivy~ using posframes to show it at various locations.

The posframe is positioned at the top right to make it visually similar to Visual Studio Code's command palette.

There are some issues with the posframe such as being unable to input text when unfocusing and focusing, so it is only enabled for ~swiper~.

#+begin_src emacs-lisp
(use-package ivy-posframe
  :config
  (setq ivy-posframe-display-functions-alist
        '((complete-symbol . ivy-posframe-display-at-point)
          (t . ivy-display-function-fallback)))
  (setq ivy-posframe-parameters '((left-fringe . 16)
                                  (right-fringe . 16))
        ivy-posframe-size-function '$ivy-posframe-get-size)
  (ivy-posframe-mode))
#+end_src

*** ivy-rich

Display rich information (such as ) in ~ivy~.

#+begin_src emacs-lisp
(use-package ivy-rich
  :config
  (ivy-rich-mode 1))
#+end_src

*** amx

A better ~M-x~ browser.
#+begin_src emacs-lisp
(use-package amx
  :config
  (amx-mode))
#+end_src

*** Treesitter

#+begin_src emacs-lisp
(use-package tree-sitter)
(use-package tree-sitter-langs)
(use-package tree-sitter-indent)

;(add-hook 'emacs-lisp-mode-hook 'tree-sitter-mode)
#+end_src

*** vterm

A terminal emulator for Emacs.

#+begin_src emacs-lisp
(use-package vterm)
#+end_src

*** Smartparens

Automatically pairs delimiters such as brackets and braces. While ~electric-pair-mode~ exists, it does not work all the time and can occassionally break indentation.

#+begin_src emacs-lisp
(use-package smartparens
  :config
  (smartparens-global-mode)
  (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil))
#+end_src

*** Screenshot.el

Takes clean and fancy snapshots of any selected region.

#+begin_src emacs-lisp
(use-package screenshot
  :init
  (load-file (locate-library "screenshot.el")) ; workaround
  :straight
  (:host github :repo "tecosaur/screenshot"))
#+end_src

*** Gnuplot

#+begin_src elisp
(use-package gnuplot)
#+end_src

*** Treemacs

#+begin_src emacs-lisp
(use-package treemacs
  :config
  (progn
    (treemacs-create-icon :icon "+" :extensions (dir-closed))
    (treemacs-create-icon :icon "-" :extensions (dir-open))))

(use-package treemacs-tab-bar
  :after treemacs)
#+end_src

*** Emmet Mode

Generates HTML snippets from CSS selectors.

#+begin_src emacs-lisp
(use-package emmet-mode)
#+end_src

*** Aggressive Indent

#+begin_src emacs-lisp
(use-package aggressive-indent)
#+end_src

*** Ripgrep

#+begin_src emacs-lisp
(use-package rg)
#+end_src

** Themes

*** Doom Themes

A collection of themes used in Doom Emacs.

#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-one t)
  (doom-themes-org-config))
#+end_src

*** Zeno Theme

#+begin_src emacs-lisp
(use-package zeno-theme)
#+end_src

*** VSCode Dark+

#+begin_src emacs-lisp
(use-package vscode-dark-plus-theme)
#+end_src

*** Paper Theme

#+begin_src emacs-lisp
(use-package grey-paper-theme)
#+end_src

** Appearance

*** Doom Modeline

Use the modeline from Doom Emacs.

#+begin_src emacs-lisp
(use-package doom-modeline
  :disabled t
  :init
  (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 32
        doom-modeline-workspace-name nil)
  (doom-modeline-def-modeline 'main
    '(bar matches buffer-info remote-host buffer-position parrot selection-info)
    '(misc-info minor-modes checker input-method
                buffer-encoding major-mode process vcs "  ")))

(column-number-mode)
#+end_src

*** Moodline

#+begin_src emacs-lisp
(use-package mood-line
  :config
  (mood-line-mode)
  :custom
  (mood-line-glyph-alist . mood-line-glyphs-fira-code))
#+end_src

*** Dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-startup-banner
        (expand-file-name
         "assets/apuEZY-transparent-small.png"
         user-emacs-directory)
        dashboard-center-content t
        dashboard-items '((projects . 5)
                          (agenda . 5))))
#+end_src

*** Rainbow Delimiers

Highlight delimiters based on their level/depth.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

*** Scroll on Drag

Click and drag to scroll.

#+begin_src emacs-lisp
(use-package scroll-on-drag)
#+end_src

*** Good Scroll

This enables /good/ smooth scrolling when using the mouse.

#+begin_src emacs-lisp
(use-package good-scroll
  :config (good-scroll-mode))
#+end_src

*** Org Superstar

Customize org-mode stars.

#+attr_org: :width 512
[[./assets/superstar.png]]

#+begin_src emacs-lisp
(use-package
  org-superstar
  :hook
  (org-mode . (lambda ()
                (org-superstar-mode 1)
                (set-face-attribute
                 'org-level-1
                 nil
                 :height 180
                 :weight 'regular)
                (set-face-attribute
                 'org-level-2
                 nil
                 :height 150
                 :weight 'regular)
                (set-face-attribute
                 'org-document-title
                 nil
                 :height 180)
                (setq org-superstar-headline-bullets-list (list "☰" "❖" "")
                      org-superstar-special-todo-item t
                      org-superstar-cycle-headline-bullets nil))))
#+end_src

*** Page Break Lines

#+begin_src emacs-lisp
(use-package page-break-lines)
#+end_src

*** hl-defined

Highlight defined symbols in elisp.

#+begin_src emacs-lisp
(use-package hl-defined
  :straight (:host github :repo "emacsmirror/hl-defined"))
#+end_src

*** Mixed Pitch

Allows for buffers to have both ~variable-pitch~ faces and ~fixed-pitch~ faces.

#+begin_src emacs-lisp
(use-package mixed-pitch
  :hook
  (org-mode . mixed-pitch-mode)
  :config
  (set-face-attribute 'variable-pitch
                      nil
                      :font
                      "Overpass"))
#+end_src

*** Ligatures

Display ligatures on Emacs.

#+begin_src emacs-lisp
(use-package ligature
  :straight
  (:host github :repo "mickeynp/ligature.el")
  :config
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>"
                                       "***" "||=" "||>" ":::" "::=" "=:=" "==="
                                       "==>" "=!=" "=>>" "=<<" "=/=" "!==" "!!."
                                       ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->"
                                       "---" "-<<" "<~~" "<~>" "<*>" "<||" "<|>"
                                       "<$>" "<==" "<=>" "<=<" "<->" "<--" "<-<"
                                       "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_("
                                       "..<" "..." "+++" "/==" "///" "_|_" "www"
                                       "&&" "^=" "~~" "~@" "~=" "~>" "~-" "**"
                                       "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-"
                                       "{|" "[|" "]#" "::" ":=" ":>" ":<" "$>"
                                       "==" "=>" "!=" "!!" ">:" ">=" ">>" ">-"
                                       "-~" "-|" "->" "--" "-<" "<~" "<*" "<|"
                                       "<:" "<$" "<=" "<>" "<-" "<<" "<+" "</"
                                       "#{" "#[" "#:" "#=" "#!"  "##" "#(" "#?"
                                       "#_" "%%" ".=" ".-" ".." ".?" "++" "?."
                                       "??" ";;" "//" "__" "~~")))
#+end_src

*** Solaire Mode

Distinguishes between code buffers (editing text, usually associated with or visiting a file) and information/popup buffers by giving them a darker background.

#+begin_src emacs-lisp
(use-package solaire-mode
  :config
  (solaire-global-mode +1))
#+end_src

*** Org Appear

Automatically toggle emphasis markers when your cusor is not at the current line. This is useful when taking and reading notes as you will see the emphasis markers as you type but not when you read.

#+begin_src emacs-lisp
(use-package org-appear
  :config
  (setq org-hide-emphasis-markers t)
  :hook
  (org-mode . org-appear-mode)
  :straight
  (:host github :repo "awth13/org-appear"))
#+end_src

*** flycheck-pos-tip

Enables popups

#+begin_src emacs-lisp
(use-package flycheck-pos-tip
  :after flycheck)
#+end_src

*** Highlight Indent Guides

#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :config
  (setq highlight-indent-guides-method 'bitmap)
  :hook
  (prog-mode . highlight-indent-guides-mode))
#+end_src

*** Org Auctex

Render faster LaTeX previews in org mode.

#+begin_src emacs-lisp
(use-package org-auctex
  :disabled t
  :straight
  (:host github :repo "karthink/org-auctex")
  :config
  (org-auctex-mode))
#+end_src

*** HTMLize

#+begin_src emacs-lisp
(use-package htmlize)
#+end_src

*** Highlight TODO

#+begin_src emacs-lisp
(use-package hl-todo
  :config
  (global-hl-todo-mode)
  (setq hl-todo-keyword-faces
        '(("TODO" . ,(face-foreground 'all-the-icons-yellow)))))
#+end_src

** Writing Modes

*** Writeroom Mode

Distraction-free editing for emacs.

#+begin_src emacs-lisp
(use-package writeroom-mode
  :config
  (setq writeroom-mode-line t)
  (setq writeroom-fullscreen-effect 'maximized)
  (setq writeroom-maximize-window nil))
#+end_src

*** Olivetti

Olivetti is an alternative that is less targeted for distraction-free editing but still has a clean interface.

#+begin_src emacs-lisp
(use-package olivetti
  :config
  (setq-default olivetti-body-width 90)
  :hook
  (org-mode . olivetti-mode))
#+end_src

** Documentation

*** Helpful

#+begin_src emacs-lisp
(use-package helpful)
#+end_src

*** which-key

#+begin_src emacs-lisp
(use-package which-key
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1)
  (setq which-key-idle-secondary-delay 0))
#+end_src

** Language Support

*** Rust

#+begin_src emacs-lisp
(use-package rust-mode)
#+end_src

*** Ron

Support for Rust Object Notation

#+begin_src emacs-lisp
(use-package ron-mode)
#+end_src

*** Rust Org-Babel

Enables Org Babel support for Rust

#+begin_src emacs-lisp
(use-package ob-rust
  :straight (:host gitlab :repo "ajyoon/ob-rust"))
#+end_src

*** Typescript

#+begin_src emacs-lisp
(use-package typescript-mode)
#+end_src

*** Web Mode

Allows for smart editing with HTML files (smarter indentation for embedded CSS and JS + templating support).

#+begin_src emacs-lisp
(use-package web-mode
  :config
  (setq web-mode-enable-auto-pairing nil)
  (setq web-mode-script-padding 0)
  (setq web-mode-style-padding 0)
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode)))
#+end_src

*** Pyright

#+begin_src emacs-lisp
(use-package lsp-pyright
  :disabled t
  :hook
  (python-mode . (lambda ()
                   (require 'lsp-pyright)
                   (lsp))))
#+end_src

*** C# Mode

#+begin_src emacs-lisp
(use-package csharp-mode
  :hook
  (csharp-mode . tree-sitter-hl-mode))
#+end_src

*** LTeX Language Server

Implements language server for markup documents (LaTeX, markdown, Org, etc.)

#+begin_src emacs-lisp
#+end_src

*** Vue/Volar

#+begin_src emacs-lisp
(use-package lsp-volar
  :disabled t
  :straight (:host github :repo "jadestrong/lsp-volar")
  :config
  (setq lsp-typescript-tsdk "/usr/lib/node_modules/typescript/lib"))
#+end_src

*** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode)
#+end_src

** LSP / Autocomplete

*** YASnippet

Yet Another Snippet template system for Emacs.

#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-global-mode 1))
#+end_src

Use premade snippets.

#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :after yasnippet)
#+end_src

File templates using YASnippet.

#+begin_src emacs-lisp
(use-package yatemplate
  :after yasnippet
  :config
  (yatemplate-fill-alist))
#+end_src

*** lsp-bridge

#+begin_src emacs-lisp
;;(use-package lsp-bridge
;;  :after '(posframe acm-terminal yasnippet)
;;  :straight
;;  (:type git
;;   :host github
;;   :repo "manateelazycat/lsp-bridge"
;;   :files (:defaults "*"))
;;  :config
;;  (global-lsp-bridge-mode))
;;
(add-to-list 'load-path "~/.emacs.d/lsp-bridge")
(require 'yasnippet)
(require 'lsp-bridge)
(global-lsp-bridge-mode)
(setq lsp-bridge-enable-hover-diagnostic t
      lsp-bridge-enable-log t)
(add-hook 'lsp-bridge-ref-mode-hook 'evil-emacs-state)
;;(use-package lsp-bridge
;;  :straight (:local-repo "~/.emacs.d/lsp-bridge" :files (:defaults "*"))
;;  :after '(yasnippet)
;;  :config
;;  (global-lsp-bridge-mode))
#+end_src

*** Flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :init
  (global-flycheck-mode))
#+end_src

** Project Management

*** Tabspaces

Use the built-in ~tab-bar.el~ and ~project.el~ packages to deliver a similar experience to ~projectile~ and ~perspective.el~.

#+begin_src emacs-lisp
(use-package tabspaces
  :straight (:host github :repo "mclear-tools/tabspaces")
  :config
  (tabspaces-mode 1)
  (tab-bar-mode)
  (setq tab-bar-new-tab-choice "*scratch*"))

(use-package project-tab-groups
  :disabled t
  :config
  (project-tab-groups-mode 1)
  (setq tab-bar-new-tab-choice "*scratch*"))
#+end_src

*** Magit

#+begin_src emacs-lisp
(use-package magit
  :config
  (setq
   magit-display-buffer-function
   #'magit-display-buffer-fullframe-status-v1))
#+end_src

*** diff-hl

Highlight diffs on the gutter.

#+begin_src emacs-lisp
(use-package diff-hl
  :config
  (global-diff-hl-mode))
#+end_src

* Appearance

Add line numbers to programming modes.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

Enable ligatures in programming modes.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'ligature-mode)
#+end_src

Split help buffers and error lists horizontally.

#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
             '("*helpful" display-buffer-at-bottom
               "*Flycheck" display-buffer-at-bottom))
#+end_src

Set fringes

#+begin_src emacs-lisp
;(set-fringe-style 'halfwidth)
#+end_src

** Visual Line Mode

Make ~evil-mode~ respect  ~visual-line-mode~, so the cursor moves a visual line rather than an actual buffer line.

#+begin_src emacs-lisp
(setq evil-respect-visual-line-mode t)
#+end_src

** Tab Bar Mode

#+begin_src emacs-lisp
(setq tab-bar-close-button-show nil
      tab-bar-new-button-show nil
      tab-bar-tab-hints t
      tab-bar-tab-name-format-function #'$tab-bar-tab-name-format)
#+end_src

** Highlight Line Mode

Enable ~hl-line-mode~ for programming buffers.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'hl-line-mode)
#+end_src

** Fringes

Set the fringe style to half-width.

#+begin_src emacs-lisp
(fringe-mode '(4 . 2))
#+end_src

** Shell Mode Color Output

Enable color output when running a shell command.

#+begin_src emacs-lisp
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+end_src

* Keybinds

** Global

Automatically indent on newline.

#+begin_src emacs-lisp
(evil-define-key 'insert prog-mode-map (kbd "RET") '$newline-and-indent)
#+end_src

#+begin_src emacs-lisp
(evil-set-leader '(normal visual) (kbd "SPC"))

(evil-define-key 'normal 'global (kbd ";") 'evil-ex)
(evil-define-key 'normal 'global (kbd "C-s") 'save-buffer)
(evil-define-key '(normal insert) 'global (kbd "C-d") 'evil-scroll-down)
(evil-define-key '(normal insert) 'global (kbd "C-u") 'evil-scroll-up)

(evil-define-key 'insert 'global (kbd "C-a") 'beginning-of-text-or-line)
(evil-define-key 'insert 'global (kbd "C-e") 'end-of-text-or-line)
(evil-define-key 'insert 'global (kbd "C-n") 'next-line)
(evil-define-key 'insert 'global (kbd "C-p") 'previous-line)
(evil-define-key 'insert 'global (kbd "C-k") 'kill-line)

(evil-define-key '(normal visual)
  'global
  (kbd "/")
  'evil-search-forward)

(evil-define-key '(normal visual)
  'global
  (kbd "?")
  'evil-search-backward)

(evil-define-key 'insert
  'global
  (kbd "C-<backspace>")
  'evil-delete-backward-word)

(evil-define-key '(insert emacs)
  'global (kbd "C-S-v")
  'clipboard-yank)

(evil-define-key 'visual
  'global
  (kbd "C-S-c")
  'evil-yank)

(define-key minibuffer-local-map (kbd "C-S-v") 'clipboard-yank)

(evil-define-key 'normal
  'global
  (kbd "C-S-c")
  'evil-yank-line)

(evil-define-key '(normal visual)
  'global
  (kbd "j")
  'evil-next-visual-line)

(evil-define-key '(normal visual)
  'global
  (kbd "k")
  'evil-previous-visual-line)

(evil-define-key 'insert
  'global
  (kbd "RET")
  '$newline-and-indent)

(evil-define-key '(normal insert visual)
  'acm-mode
  (kbd "RET")
  'acm-complete)
#+end_src

Jump to any text with 2 chars, similar to ~vim-easymotion~ and ~vim-sneak~.

#+begin_src emacs-lisp
(evil-define-key 'normal 'global (kbd "s") 'avy-goto-char-2)
#+end_src

Upon exiting insert mode, trim all trailing whitespace if the buffer is in ~prog-mode~.

#+begin_src emacs-lisp
(add-hook 'evil-insert-state-exit-hook '$prog-delete-trailing-whitespace)
#+end_src

Show LSP documentation with =K= with ~lsp-bridge-popup-documentation~.

#+begin_src emacs-lisp
;(evil-define-key 'normal 'global (kbd "K") '$lsp-ui-doc-glance-or-focus)
(evil-define-key 'normal 'global (kbd "K") 'lsp-bridge-popup-documentation)
(evil-define-key 'normal 'global (kbd "=") 'lsp-ui-doc-focus-frame)
#+end_src

In evil mode, use =M-u= as the universal argument.

#+begin_src emacs-lisp
(evil-define-key '(normal visual) 'global (kbd "M-u") 'universal-argument)
#+end_src

** LSP

#+begin_src emacs-lisp
(evil-define-key 'normal 'global (kbd "gd") 'lsp-bridge-find-def)
(evil-define-key 'normal 'global (kbd "gD") 'lsp-bridge-find-impl)
#+end_src

** Leader =SPC=

#+begin_src emacs-lisp
(general-define-key
 :prefix "<leader>"
 :keymaps 'normal
 "SPC" '($tabspaces-counsel-switch-buffer :which-key "Switch buffer")
 "." '(find-file :which-key "Find file in current directory"))
#+end_src

** Appearance =SPC a=

#+begin_src emacs-lisp
(general-define-key
 :prefix "<leader> a"
 :keymaps 'normal
 "" '(nil :which-key "appearance")
 "t" '(load-theme :which-key "Load theme")
 "T" '(disable-theme :which-key "Disable theme"))
#+end_src

** Emacs/Editor =SPC e=

#+begin_src emacs-lisp
(general-define-key
 :prefix "<leader> e"
 :keymaps 'normal
 "" '(nil :which-key "emacs")
 "e" '(eval-buffer :which-key "Eval buffer")
 "f" '(eval-defun :which-key "Eval defun")
 "q" '(save-buffers-kill-emacs :which-key "Kill Emacs")
 ";" '(eval-expression :which-key "Eval expression"))

(general-define-key
 :prefix "<leader> e"
 :keymaps 'visual
 "" '(nil :which-key "emacs")
 "e" '(eval-region :which-key "Eval region"))
#+end_src

** Toggle =SPC t=

#+begin_src emacs-lisp
(general-define-key
 :prefix "<leader> t"
 :keymaps 'normal
 "" '(nil :which-key "toggle")
 "w" 'writeroom-mode
 "o" 'olivetti-mode
 "c" 'canvas-mode
 "t" 'treemacs)
#+end_src

** File =SPC f=

#+begin_src emacs-lisp
(general-define-key
 :prefix "<leader> f"
 :keymaps 'normal
 "" '(nil :which-key "file")
 "f" '($find-file-or-project :which-key "Find file")
 "." '(find-file :which-key "Find file in current directory")
 ;;"c" '(find-config-file :which-key "Open config.org")
 "r" '(counsel-recentf :which-key "Recent files")
 "R" '(rename-file-and-buffer :which-key "Rename file & buffer")
 "d" '(delete-file :which-key "Delete file"))
#+end_src

** Buffer =SPC b=

#+begin_src emacs-lisp
(general-define-key
 :prefix "<leader> b"
 :keymaps 'normal
 "" '(nil :which-key "buffer")
 ;"b" '(persp-counsel-switch-buffer :which-key "Pick buffer in perspective")
 ;"b" '($counsel-switch-buffer-or-project :which-key "Pick buffer")
 ;"b" '($counsel-tabspaces-switch-to-buffer :which-key "Switch to buffer")
 "b" '($tabspaces-counsel-switch-buffer :which-key "Pick buffer")
 "B" '(switch-to-buffer :which-key "Pick from all buffers")
 "r" '(revert-buffer :which-key "Revert buffer")
 "d" '(kill-current-buffer :which-key "Kill buffer")
 "q" '(kill-buffer-and-window :which-key "Kill buffer and window")
 "s" '($switch-to-scratch-buffer :which-key "Scratch buffer")
 "n" '(evil-buffer-new :which-key "New buffer"))
#+end_src

** Window =SPC w=

#+begin_src emacs-lisp
(general-define-key
 :prefix "<leader> w"
 :keymaps 'normal
 "" '(nil :which-key "window")
 "h" 'evil-window-left
 "j" 'evil-window-down
 "k" 'evil-window-up
 "l" 'evil-window-right
 "q" '(evil-quit :which-key "Quit window"))
#+end_src

** Search =SPC s=

#+begin_src emacs-lisp
(general-define-key
 :prefix "<leader> s"
 :keymaps 'normal
 "" '(nil :which-key "search")
 "s" '(swiper :which-key "Search with swiper")
 "o" '(counsel-outline :which-key "Outline")
 "O" '(counsel-org-goto-all :which-key "All outlines"))
#+end_src

** Help =SPC h=

#+begin_src emacs-lisp
(general-define-key
 :prefix "<leader> h"
 :keymaps 'normal
 "" '(nil :which-key "helpful")
 "v" '(helpful-variable :which-key "Describe variable")
 "f" '(helpful-function :which-key "Describe function")
 "m" '(helpful-macro :which-key "Describe macro")
 "k" '(helpful-key :which-key "Describe key")
 "s" '(helpful-symbol :which-key "Describe symbol")
 "q" '(helpful-kill-buffers :which-key "Kill all helpful buffers"))
#+end_src

** Git =SPC g=

#+begin_src emacs-lisp
(general-define-key
 :prefix "<leader> g"
 :keymaps 'normal
 "" '(nil :which-key "git")
 "g" '(magit-status :which-key "Open magit"))
#+end_src


** Project =SPC p=

#+begin_src emacs-lisp :tangle no
(general-define-key
 :prefix "<leader> p"
 :keymaps 'normal
 "" '(nil :which-key "project")
 "p" '(projectile-switch-project :which-key "Switch project")
 "a" '(projectile-add-known-project :which-key "Add project")
 "b" '(projectile-switch-to-buffer :which-key "Switch buffer in project")
 "!" '(project-shell-command :which-key "Run shell command")
 "&" '(project-async-shell-command :which-key "Run async shell command")
 "f" '(projectile-find-file :which-key "Find file"))
#+end_src

#+begin_src emacs-lisp
(general-define-key
 :prefix "<leader> p"
 :keymaps 'normal
 "" '(nil :which-key "project")
 ;"p" '(project-switch-project :which-key "Switch project")
 "p" '(tabspaces-open-or-create-project-and-workspace :which-key "Switch project")
 "!" '(project-shell-command :which-key "Run shell command")
 "&" '(project-async-shell-command :which-key "Run async shell command"))
#+end_src

** Tab Groups =SPC TAB=

#+begin_src emacs-lisp :tangle no
(when (symbol-value 'persp-mode)
  (general-define-key
   :prefix "<leader> TAB"
   :keymaps 'normal
   "" '(nil :which-key "persp-mode")
   "TAB" '(persp-switch :which-key "Switch perspective")
   "r" '(persp-rename :which-key "Rename perspective")
   "1" '($persp-switch-to-1 :which-key "Switch to perspective 1")
   "2" '($persp-switch-to-2 :which-key "Switch to perspective 2")
   "3" '($persp-switch-to-3 :which-key "Switch to perspective 3")
   "4" '($persp-switch-to-4 :which-key "Switch to perspective 4")
   "5" '($persp-switch-to-5 :which-key "Switch to perspective 5")))
#+end_src

#+begin_src emacs-lisp
;(general-define-key
; :prefix "<leader> TAB"
; :keymaps 'normal
; "" '(nil :which-key "tabspace")
; "TAB" '(tabspaces-switch-or-create-workspace :which-key "Switch tabspace")
; "r" '(tab-bar-rename-tab :which-key "Rename tab"))

(general-define-key
 :prefix "<leader> TAB"
 :keymaps 'normal
 "" '(nil :which-key "tabspace")
 "TAB" '(tabspaces-switch-or-create-workspace :which-key "Switch tabgroup/project")
 "1" '((lambda ()
         (interactive)
         (tab-bar-select-tab 1))
       :which-key "Switch to tab 1")
 "2" '((lambda ()
         (interactive)
         (tab-bar-select-tab 2))
       :which-key "Switch to tab 2")
 "3" '((lambda ()
         (interactive)
         (tab-bar-select-tab 3))
       :which-key "Switch to tab 3")
 "4" '((lambda ()
         (interactive)
         (tab-bar-select-tab 4))
       :which-key "Switch to tab 4")
 "5" '((lambda ()
         (interactive)
         (tab-bar-select-tab 5))
       :which-key "Switch to tab 5")
 "6" '((lambda ()
         (interactive)
         (tab-bar-select-tab 6))
       :which-key "Switch to tab 6")
 "7" '((lambda ()
         (interactive)
         (tab-bar-select-tab 7))
       :which-key "Switch to tab 7")
 "r" '(tab-bar-rename-tab :which-key "Rename tab")
 "d" '($tabspaces-kill-stray-buffers-close-workspace :which-key "Close tab")
 "n" '(tab-new :which-key "New tab"))
#+end_src

** Open =SPC o=

#+begin_src emacs-lisp
(general-define-key
 :prefix "<leader> o"
 :keymaps 'normal
 "" '(nil :which-key "open")
 "a" '(org-agenda))
#+end_src

** Code =SPC c=

#+begin_src emacs-lisp
(general-define-key
 :prefix "<leader> c"
 :keymaps 'normal
 "" '(nil :which-key "code")
 "r" '(lsp-find-references :which-key "Find references")
 "d" '(lsp-find-definition :which-key "Find definition")
 "i" '(lsp-find-implementation :which-key "Find implementation")
 "c" '(lsp-execute-code-action :which-key "Code actions")
 "e" '(lsp-bridge-diagnostic-list :which-key "Errors list"))
#+end_src

* Orgmode

Org mode is the best part of emacs; even if I switch back to Vim/Neovim, I will still be using org mode in Emacs as it is just that great.

This function toggles entries between TODO and DONE.

#+begin_src emacs-lisp
(defun org-toggle-todo ()
    (interactive)
    (save-excursion
        (org-back-to-heading t) ;; Make sure command works even if point is
                                ;; below target heading
        (when (looking-at "\*+ ")
          (org-todo))))
#+end_src

Sets the directory where my org files are usually located.

#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/Documents/org"
      org-default-notes-file (concat org-directory "/agenda.org")
      org-agenda-files '("~/Dropbox/Documents/org"))
#+end_src

Log when a TODO item is marked as done.

#+begin_src emacs-lisp
(setq org-log-done 'time)
#+end_src

Set LaTeX preview directory to a temporary directory, so it is not stored where the org file is.

#+begin_src emacs-lisp
(setq org-preview-latex-image-directory "~/mnt/emacs-backup/latex")
#+end_src

Enable shift selection in org mode.

#+begin_src emacs-lisp
(setq org-support-shift-select t)
#+end_src

** Appearance

Set the symbols of the ellipses of collapsed org headers.

#+begin_src emacs-lisp
(setq org-ellipsis " ")
#+end_src

Sets the character of plainlists ([[https://jessicastringham.net/2016/10/02/org-mode-bullet/][source]]). Also sets the header bullet symbols.

#+begin_src emacs-lisp
(font-lock-add-keywords 'org-mode
 '(("^ +\\([-*]\\) " 0
    (prog1 ()
      (compose-region (match-beginning 1) (match-end 1) "•")))))
#+end_src

Add space between collapsed headers.

#+begin_src emacs-lisp
(setq org-cycle-separator-lines 1)
#+end_src

Remove extra indentation on source blocks.

#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0)
#+end_src

Increase the size of LaTeX previews.

#+begin_src emacs-lisp
(setq org-format-latex-options '(:scale 1.5 :foreground default))
#+end_src

Hide emphasis markers

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

Specify the size of the image using ~#+attr_org~

#+begin_src emacs-lisp
(setq org-image-actual-width nil)
#+end_src

** Org-specific Keybinds

Allows pressing ~RET~ to toggle TODO/DONE on an org entry.

#+begin_src emacs-lisp
(general-define-key
 :states 'normal
 :keymaps 'org-mode-map
 "RET" '$org-ret)
#+end_src

Allows pressing ~RET~ to click on an agenda entry.

#+begin_src emacs-lisp
(evil-define-key 'normal org-agenda-mode-map (kbd "RET") 'org-agenda-goto)
#+end_src

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

Make ~M-RET~ insert heading and enter insert mode.

#+begin_src emacs-lisp
(evil-define-key
  '(normal insert)
  org-mode-map
  (kbd "M-RET")
  'org-meta-return)
(evil-define-key
  '(normal insert)
  org-mode-map
  (kbd "M-S-RET")
  'org-append-todo-heading)
#+end_src

Make ~M-h~, ~M-j~, etc. replicate its arrow versions.

#+begin_src emacs-lisp
(evil-define-key '(normal insert) org-mode-map (kbd "M-h") 'org-metaleft)
(evil-define-key '(normal insert) org-mode-map (kbd "M-l") 'org-metaright)
(evil-define-key '(normal insert) org-mode-map (kbd "M-j") 'org-metadown)
(evil-define-key '(normal insert) org-mode-map (kbd "M-k") 'org-metaup)
#+end_src

Search the outline with ~C-/~.

#+begin_src emacs-lisp
(general-define-key
 :states '(normal insert)
 :keymaps 'org-mode-map
 "C-/" 'counsel-outline)
#+end_src

** Org Babel

Org Babel allows users to write and execute source code blocks in Org documents. This allows for literate programming and notebooks.

Enable Org Babel for specific langauges.

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((C . t)
   (emacs-lisp . t)
   (python . t)))
#+end_src

** Org ID

Require the Org ID package

#+begin_src emacs-lisp
(require 'org-id)
#+end_src

#+begin_src emacs-lisp
(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
#+end_src

** Org TODO Keywords

Enable additional keywords/states for org-mode.

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "STARTED" "DONE"))
      org-todo-keyword-faces
      '(("STARTED" ,(face-foreground 'all-the-icons-yellow))))
#+end_src
